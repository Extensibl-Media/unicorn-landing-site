---
import KPICards from "@/components/admin/kpi-cards";
import AdminLayout from "@/layouts/AdminLayout.astro";
import {
    Users,
    UserPlus,
    DollarSign,
    TriangleAlert,
    Verified,
} from "lucide-react";
import { calculateKpiChange } from "@/lib/utils";
import { PUBLIC_SITE_URL } from "astro:env/client";
import type { Database } from "@/types/supabase";
import { Button } from "@/components/ui/button";
import { EventsTable } from "@/components/admin/events-table";

type EventWithClub = Database["public"]["Tables"]["events"]["Row"] & {
    club: Database["public"]["Tables"]["clubs"]["Row"];
};

export interface DashboardApiResponse {
    success: boolean;
    dateRanges: {
        currentWeekStart: string;
        previousWeekStart: string;
        previousWeekEnd: string;
    };
    profiles: {
        currentWeek: {
            count: number;
            data: Array<{
                username: string;
                avatar_url: string | null;
                created_at: string;
            }>;
        };
        previousWeek: {
            count: number;
        };
    };
    verificationRequests: {
        currentWeek: {
            count: number;
            data: Array<{
                id: string;
                user_id: string;
                created_at: string;
                status: string;
            }>;
        };
        previousWeek: {
            count: number;
        };
    };
    reportedUsers: {
        currentWeek: {
            count: number;
            data: Array<{
                id: string;
                user_id: string;
                created_at: string;
                status: string;
            }>;
        };
        previousWeek: {
            count: number;
        };
    };
    upcomingEvents: EventWithClub[];
    error?: string; // For error responses
}

const dashboardData: DashboardApiResponse = await fetch(
    `${PUBLIC_SITE_URL}/api/dashboard`,
    {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    },
).then((res) => res.json());

const newUserStats = calculateKpiChange(
    dashboardData.profiles.currentWeek.count,
    dashboardData.profiles.previousWeek.count,
    {
        formatValue: (val: number) => val.toLocaleString(),
    },
);

const newVerificationStats = calculateKpiChange(
    dashboardData.verificationRequests.currentWeek.count,
    dashboardData.verificationRequests.previousWeek.count,
    {
        formatValue: (val: number) => val.toLocaleString(),
    },
);

const newReportedUserStats = calculateKpiChange(
    dashboardData.reportedUsers.currentWeek.count,
    dashboardData.reportedUsers.previousWeek.count,
    {
        formatValue: (val: number) => val.toLocaleString(),
    },
);

const stats = [
    {
        title: "New Users",
        value: newUserStats.value,
        change: newUserStats.change,
        isPositive: newUserStats.isPositive,
        icon: Users,
    },
    {
        title: "Verified Requests",
        value: newVerificationStats.value,
        change: newVerificationStats.change,
        isPositive: newVerificationStats.isPositive,
        icon: Verified,
    },
    {
        title: "Reported Users",
        value: newReportedUserStats.value,
        change: newReportedUserStats.change,
        isPositive: newReportedUserStats.isPositive,
        icon: TriangleAlert,
    },
];
---

<AdminLayout title="Dashboard">
    <!-- KPI Cards -->
    <KPICards stats={stats} />
    <div class="mt-8 space-y-4">
        <div class="flex justify-between flex-wrap gap-2 mb-4">
            <h2 class="text-xl font-semibold">Upcoming Events</h2>
            <a
                class="bg-secondary text-secondary-foreground"
                href="/admin/events/">See All Events</a
            >
        </div>
        <EventsTable
            client:load
            truncated
            events={dashboardData.upcomingEvents}
        />
    </div>
</AdminLayout>
